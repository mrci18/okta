Resources:
  ProdDevOpsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: !Ref SAMLARN
          Action: sts:AssumeRoleWithSAML
          Condition:
            StringEquals: 
              SAML:aud: "https://signin.aws.amazon.com/saml"

  DBAIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DBAIAM
      Roles: 
      - !Ref ProdDBARole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: IAMView
          Effect: Allow
          Action:
          - iam:List*
          - iam:Get*
          Resource: "*"
        - Sid: NoBoundaryEdit
          Effect: Deny
          Action: 
          - iam:CreatePolicyVersion
          - iam:DeletePolicy
          - iam:DeletePolicyVersion
          - iam:SetDefaultPolicyVersion
          Resource: !Sub arn:aws:iam::${AWS::AccountId}:policy/DBABoundary
        - Sid: PutPB
          Effect: Allow
          Action: 
          - iam:PutRolePermissionsBoundary
          Resource: "*"
        - Sid: IAM 
          Effect: Allow
          Action:
          - iam:CreateRole
          - iam:CreatePolicy
          Resource: "*"
          Condition: 
            StringEquals: 
              iam:PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/DBABoundary
        - Sid: OnlyAttachPolicyWithPermissionBoundary
          Effect: Allow
          Action:
          - iam:AttachRolePolicy
          - iam:PutRolePolicy
          Resource: "*"
          Condition: 
            StringEquals: 
              iam:PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/DBABoundary

  DevOpsPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DevOps
      Roles: 
      - !Ref ProdDevOpsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CatchAll
          Effect: Allow
          Action:
          - acm:*
          - apigateway:*
          - athena:*
          - backup:*
          - cloudformation:*
          - cloudfront:*
          - cloudwatch:*
          - config:*
          - dynamodb:*
          - ec2:*
          - elasticfilesystem:*
          - elasticloadbalancing:*
          - events:*
          - execute-api:*
          - glacier:*
          - iam:PassRole
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:Encrypt
          - kms:GetKeyRotationStatus
          - kms:RevokeGrant
          - kms:PutKeyPolicy
          - kms:TagResource
          - kms:DescribeKey
          - kms:CreateKey
          - kms:CreateGrant
          - kms:ListKeyPolicies
          - kms:GetKeyPolicy
          - kms:ListGrants
          - kms:ListKeys
          - kms:ListAliases
          - kms:CreateAlias
          - lambda:*
          - rds:*
          - route53:ChangeResourceRecordSets
          - route53:DeleteRecordSets
          - route53:ListResourceRecordSets
          - ses:*
          - sns:*
          - sts:*
          - support:*
          - s3:*
          - waf:*
          Resource: "*"
        - Sid: CloudTrail
          Effect: Deny
          Action:
          - cloudtrail:StopLogging
          - cloudtrail:DeleteTrail
          - cloudtrail:CreateTrail
          - cloudtrail:RemoveTags
          Resource: "*"
        - Sid: TrustedAdvisor
          Action:
          - trustedadvisor:ExcludeCheckItems
          - trustedadvisor:RefreshCheck
          Effect: Allow
          Resource: "*"
          
### DBA ###
  ProdDBARole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/job-function/DatabaseAdministrator 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: !Ref SAMLARN
          Action: sts:AssumeRoleWithSAML
          Condition:
            StringEquals: 
              SAML:aud: "https://signin.aws.amazon.com/saml"

  DBAPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DBA
      Roles: 
      - !Ref ProdDBARole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AthenaDMSGlue
          Effect: Allow
          Action:
          - athena:*
          - dms:*
          - glue:*
          Resource: "*"

##DBA Permission Boundary
  DBABoundaryPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: OktaDBABoundary
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: DatabaseAdministrator1
          Effect: Allow
          Action:
          - athena:*
          - cloudwatch:DeleteAlarms
          - cloudwatch:Describe*
          - cloudwatch:DisableAlarmActions
          - cloudwatch:EnableAlarmActions
          - cloudwatch:Get*
          - cloudwatch:List*
          - cloudwatch:PutMetricAlarm
          - datapipeline:ActivatePipeline
          - datapipeline:CreatePipeline
          - datapipeline:DeletePipeline
          - datapipeline:DescribeObjects
          - datapipeline:DescribePipelines
          - datapipeline:GetPipelineDefinition
          - datapipeline:ListPipelines
          - datapipeline:PutPipelineDefinition
          - datapipeline:QueryObjects
          - dms:*
          - dynamodb:*
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeAvailabilityZones
          - ec2:DescribeInternetGateways
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticache:*
          - glue:*
          - iam:ListRoles
          - iam:GetRole
          - kms:ListKeys
          - lambda:CreateEventSourceMapping
          - lambda:CreateFunction
          - lambda:DeleteEventSourceMapping
          - lambda:DeleteFunction
          - lambda:GetFunctionConfiguration
          - lambda:ListEventSourceMappings
          - lambda:ListFunctions
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:FilterLogEvents
          - logs:GetLogEvents
          - logs:Create*
          - logs:PutLogEvents
          - logs:PutMetricFilter
          - rds:*
          - redshift:*
          - s3:CreateBucket
          - sns:CreateTopic
          - sns:DeleteTopic
          - sns:Get*
          - sns:List*
          - sns:SetTopicAttributes
          - sns:Subscribe
          - sns:Unsubscribe
          Resource: "*"
        - Sid: DatabaseAdministrator2
          Effect: Allow
          Action:
          - s3:AbortMultipartUpload
          - s3:DeleteObject*
          - s3:Get*
          - s3:List*
          - s3:PutAccelerateConfiguration
          - s3:PutBucketTagging
          - s3:PutBucketVersioning
          - s3:PutBucketWebsite
          - s3:PutLifecycleConfiguration
          - s3:PutReplicationConfiguration
          - s3:PutObject*
          - s3:Replicate*
          - s3:RestoreObject
          Resource:
          - "*"
        - Sid: DatabaseAdministrator3
          Effect: Allow
          Action:
          - iam:PassRole
          Resource:
          - arn:aws:iam::*:role/rds-monitoring-role
          - arn:aws:iam::*:role/rdbms-lambda-access
          - arn:aws:iam::*:role/lambda_exec_role
          - arn:aws:iam::*:role/lambda-dynamodb-*
          - arn:aws:iam::*:role/lambda-vpc-execution-role
          - arn:aws:iam::*:role/DataPipelineDefaultRole
          - arn:aws:iam::*:role/DataPipelineDefaultResourceRole

### Infra ###
  ProdInfraRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      # Broad permissions for now because we don't want to interrupt Infra workflow
      # Infra also doesn't seem like they need to create IAM roles 
      - arn:aws:iam::aws:policy/AmazonEC2FullAccess 
      - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
      - arn:aws:iam::aws:policy/AmazonRoute53ResolverFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: !Ref SAMLARN
          Action: sts:AssumeRoleWithSAML
          Condition:
            StringEquals: 
              SAML:aud: "https://signin.aws.amazon.com/saml"

  # InfraPolicy:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyName: DBA
  #     Roles: 
  #     - !Ref ProdDBARole
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Sid: AthenaDMSGlue
  #         Effect: Allow
  #         Action:
  #         - athena:*
  #         - dms:*
  #         - glue:*
  #         Resource: "*"

##Infra Permission Boundary
  InfraBoundaryPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: OktaInfraBoundary
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: EC2FullAccess
          Effect: Allow
          Action: 
          - autoscaling:*
          - cloudwatch:*
          - ec2:*
          - elasticloadbalancing:*
          - route53:*
          - route53domains:*
          - route53resolver:*
          Resource: "*"
        - Sid: CreateServiceLinkedRole
          Effect: Allow
          Action: iam:CreateServiceLinkedRole
          Resource: "*"
          Condition:
            StringEquals:
              iam:AWSServiceName:
              - autoscaling.amazonaws.com
              - ec2scheduled.amazonaws.com
              - elasticloadbalancing.amazonaws.com
              - spot.amazonaws.com
              - spotfleet.amazonaws.com
              - transitgateway.amazonaws.com

### Read Only ###
  ReadOnlyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/ReadOnlyAccess
      PermissionsBoundary: arn:aws:iam::aws:policy/ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: !Ref SAMLARN
          Action: sts:AssumeRoleWithSAML
          Condition:
            StringEquals: 
              SAML:aud: "https://signin.aws.amazon.com/saml"

Parameters:
  SAMLARN:
    Description: The SAML ARN of the IdP in this account
    Type: String